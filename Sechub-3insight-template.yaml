AWSTemplateFormatVersion: 2010-09-09
Parameters:
  arn1:
    Type: String
    Default: arn:aws:securityhub:<region>:<accountid>:insight/<accountid>/custom/random
    Description: the first securityhub insight arn
  arn2:
    Type: String
    Default: arn:aws:securityhub:<region>:<accountid>:insight/<accountid>/custom/random
    Description: the second securityhub insight arn
  arn3:
    Type: String
    Default: arn:aws:securityhub:<region>:<accountid>:insight/<accountid>/custom/random
    Description: the third securityhub insight arn
Resources:
  EventRule:
    Type: 'AWS::Events::Rule'
    Properties:
      Description: EventRule
      EventPattern:
        source:
          - aws.securityhub
        detail-type:
          - Security Hub Findings - Imported
        detail:
          findings:
            ProductName:
              - Macie
            Types:
              - prefix: Sensitive Data Identifications
           
            Workflow:
              Status:
                - NEW
            RecordState:
              - ACTIVE
      State: ENABLED
      Targets:
        - Arn:
            'Fn::GetAtt':
              - LambdaFunction
              - Arn
          Id: '1'
  PermissionForEventsToInvokeLambda:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName:
        Ref: LambdaFunction
      Action: 'lambda:InvokeFunction'
      Principal: events.amazonaws.com
      SourceArn:
        'Fn::GetAtt':
          - EventRule
          - Arn
  LambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Runtime: python3.9
      Role: !GetAtt IAMRole.Arn
      Handler: index.lambda_handler
      Timeout: 600
      Environment:
        Variables:
          arn1: !Ref arn1
          arn2: !Ref arn2
          arn3: !Ref arn3

      Code:
        ZipFile: |
          import json
          import os
          import boto3
          import datetime
          from datetime import date
          import logging
          logger=logging.getLogger()
          logger.setLevel(logging.INFO)
          sh = boto3.client('securityhub')
          #get insights result
          def getinsight(insight):
              condition=[]
              response = sh.get_insight_results(
              InsightArn=insight)
              result=response["InsightResults"]["ResultValues"]
              if len(result)>0:
                  for i in result:
                      condition.append(i['GroupByAttributeValue'])
              return(condition)
              # create a critical securityhub_finding ,you may modify some field such as title,alertdes
          def create_securityhub_finding (aws_account_id,region,resourceid):
              # you may modify below Parameters for different user cases

              alerttype='TTPs/MITRE ATT&CK'   #
              title='SIEM Alert-IAM attack in 3 phases'
              alertdes='The ec2 has been attacked by a principle according to MITRE ATT&CK in 3 phases'
              resourcetype='AwsEc2Instance'

              # you may modify above Parameters for different user cases

              d = datetime.datetime.now()
              new_recorded_time = d.isoformat() + "Z"
              findings=[]
              sh_payload = {
              "SchemaVersion": '2018-10-08',
              "Title": title,
              "AwsAccountId":aws_account_id ,
              "CreatedAt":new_recorded_time ,
              "UpdatedAt":new_recorded_time ,
              "Description": alertdes,
              "FindingProviderFields": {
                  "Severity": {
                      "Label": "CRITICAL",
                      "Original":"CRITICAL"
                  },
                  "Types": [alerttype]
              },
              "GeneratorId": "SIEM Alert generated by insights",
              "Id": 'arn:aws-cn:siem:'+region+':'+aws_account_id+':finding/insight'+resourceid+str(d),
              "ProductArn": 'arn:aws:securityhub:' + region + ':'+aws_account_id+':product/'+aws_account_id+'/default',# 中国区的话改为aws-cn
              "Resources": [{
                  'Type': resourcetype,
                  'Region': region,
                  'Id': resourceid
              }],
              "Note": {
                  "Text": "Please review the incident and take actions",
                  "UpdatedBy":"macie finding",
                  "UpdatedAt":new_recorded_time
              }
          }
              findings.append(sh_payload)
              
              logger.info('Creating custom Security Hub finding...')
              try:
                  response = sh.batch_import_findings(
                  Findings=findings
                  )
                  logger.info("Successfully imported {} Security Hub findings".format(response['SuccessCount']))
              except Exception as e:
                  print(e)

          def lambda_handler(event, context):
              group1=[]
              group2=[]
              group3=[]
              aws_account_id = event["account"]
              region = event['region']
              #查询insight1和2的结果 inqury the result from both insights
              logger.info('inquerying insight result for this user case...')
              group1=getinsight(os.environ['arn1'])
              group2=getinsight(os.environ['arn2'])
              group2=getinsight(os.environ['arn3'])
              resourceids=[x for x in group1 if x in group2 if x in group3]
              if len(resourceids)>0:
                  for each in resourceids:
                      create_securityhub_finding (aws_account_id,region,each)  #生成一条new finding写入Securityhub, for each resourceid ,write a new critical finding in securityhub
              return(resourceids)
           
      Description: user case for IAM attack finding in 3 phases,triggered by fixed time eventbridge rule which you can change 
      TracingConfig:
        Mode: Active
  IAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Description: basic lambda role plus securthub write permission
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: siem-eb-lambda-policy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'securityhub:GetInsightResults'
                  - 'securityhub:BatchImportFindings'
                  - 's3:PutObjectTagging'
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - '*'
